apiVersion: v1
kind: Service
metadata:
  name: dashboard-ingest
  namespace: egov
  labels:
    app: dashboard-ingest
    group: rainmaker
  annotations:
    prometheus.io/path: /dashboard-ingest/prometheus
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"    
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: "spring-boot"  
  - port: 5005
    targetPort: 5005
    name: "jvm-debug"
  selector:
    app: dashboard-ingest
    group: rainmaker
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dashboard-ingest
  namespace: egov
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  replicas: {{conf['dashboard-ingest']['replicas']}}
  template:
    metadata:
      labels:
        app: dashboard-ingest
        group: rainmaker
    spec:
      containers:
      - name: dashboard-ingest
        image: {{conf['dashboard-ingest']['images'][0]}}
        ports:
        - containerPort: 8080
          name: "spring-boot"
        - containerPort: 5005
          name: "jvm-debug"
        env:
        - name: SERVICES_ESINDEXER_HOST
          value: "{{conf['egov-config']['es-indexer-host']}}" 
        - name: SERVICES_ESINDEXER_HOST_NAME
          value: "{{conf['logging-config']['es-host']}}"
        - name: SERVICES_ESINDEXER_HOST_PORT
          value: "{{conf['logging-config']['es-port']}}"
        - name: ES_TARGET_INDEX_NAME
          value: "dss-target_v1"
        - name: ES_INDEX_NAME
          value: "dss-collection_v1"
        - name: ES_DOCUMENT_TYPE
          value: "pipeline_data"
        - name: ES_HOST_SCHEMA
          value: "https"
        - name: ES_INDEX_SEARCHQUERY_COLLECTION
          value: "{\"size\": \"10\",\"query\":{\"bool\":{\"must\":[{\"wildcard\": {\"Data.tenantId.keyword\":\"pb.*\"}}]}}}"
        - name: ES_INDEX_SEARCHQUERY_BILLING
          value: "{\"size\": \"10\",\"query\":{\"bool\":{\"must\":[{\"wildcard\": {\"tenantid.keyword\":\"pb.*\"}}]}}}"
        - name: EGOV_SERVICES_ESINDEXER_HOST_SEARCH
          value: "/_search"
        - name: SPRING_DATA_ELASTICSEARCH_CLUSTER_NAME
          value: "elasticsearch-v1"
        - name: SPRING_DATA_ELASTICSEARCH_CLUSTER_NODES
          value: "elasticsearch-v1"
        - name: TRANSFORMATION_CONFIG_LOCATION
          value: "config/transform_transaction_v1.json"
        - name: SCHEMA_TRANSACTION_VALIDATION
          value: "config/validator_transaction_v1.json"
        - name: SCHEMA_TRANSACTION_TRANSFORMATION
          value: "config/transform_transaction_v1.json"
        - name: SCHEMA_TRANSACTION_ENRICHMENT
          value: "config/enrichment_transaction_v1.json"
        - name: SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER
          value: org.egov.tracer.kafka.deserializer.HashMapDeserializer
        - name: SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER
          value: org.apache.kafka.common.serialization.StringDeserializer
        - name: SPRING_KAFKA_CONSUMER_GROUP_ID
          value: pipeline-group
        - name: SPRING_KAFKA_PRODUCER_KEY_SERIALIZER
          value: org.apache.kafka.common.serialization.StringSerializer
        - name: SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER
          value: org.springframework.kafka.support.serializer.JsonSerializer
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: egov-config
              key: kafka-brokers
        - name: SERVER_PORT
          value: "8080"
        resources:
          requests:
            memory: "{{ conf['dashboard-ingest']['memory_limits'] or "1Gi"}}"
          limits:
            memory: "{{ conf['dashboard-ingest']['memory_limits'] or "1Gi"}}"