# Source: kafka-v2/templates/jmx-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-v2-jmx-configmap
  namespace: kafka-cluster
  labels:
    app: kafka-v2
data:
  jmx-kafka-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    rules:
    - pattern : kafka.server<type=ReplicaManager, name=(.+)><>(Value|OneMinuteRate)
      name: "kafka_infra_server_replicamanager_$1"
    - pattern : kafka.controller<type=KafkaController, name=(.+)><>Value
      name: "kafka_infra_controller_kafkacontroller_$1"
    - pattern : kafka.server<type=BrokerTopicMetrics, name=(.+)><>OneMinuteRate
      name: "kafka_infra_server_brokertopicmetrics_$1"
    - pattern : kafka.network<type=RequestMetrics, name=RequestsPerSec, request=(.+)><>OneMinuteRate
      name: "kafka_infra_network_requestmetrics_requestspersec_$1"
    - pattern : kafka.network<type=SocketServer, name=NetworkProcessorAvgIdlePercent><>Value
      name: "kafka_infra_network_socketserver_networkprocessoravgidlepercent"
    - pattern : kafka.server<type=ReplicaFetcherManager, name=MaxLag, clientId=(.+)><>Value
      name: "kafka_infra_server_replicafetchermanager_maxlag_$1"
    - pattern : kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
      name: "kafka_infra_kafkarequesthandlerpool_requesthandleravgidlepercent"
    - pattern : kafka.controller<type=ControllerStats, name=(.+)><>OneMinuteRate
      name: "kafka_infra_controller_controllerstats_$1"
    - pattern : kafka.server<type=SessionExpireListener, name=(.+)><>OneMinuteRate
      name: "kafka_infra_server_sessionexpirelistener_$1"
---
# Source: kafka-v2/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-v2-headless
  namespace: kafka-cluster
  labels:
    app: kafka-v2
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: kafka-v2
---
# Source: kafka-v2/templates/statefulset.yaml

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: kafka-v2
  namespace: kafka-cluster
  labels:
    app: kafka-v2
spec:
  serviceName: kafka-v2-headless
  podManagementPolicy: OrderedReady
  replicas: {{conf['kafka-v2']['replicas']}}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka-v2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - kafka-v2
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: prometheus-jmx-exporter
        image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm    
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
        - containerPort: 5556
        resources:
          null
          
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      - name: kafka-v2-broker
        image: {{conf['kafka-v2']['images'][0]}}
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 5555
          name: jmx
        resources:
          limits:
            cpu: 500m
            memory: 1152Mi
          requests:
            cpu: 300m
            memory: 1024Mi
        readinessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 1                      
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: KAFKA_HEAP_OPTS
          value: {{conf['kafka-v2']['heap']}}
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{conf['kafka-v2']['zookeeper-connect']}}
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka-data/logs"
        - name: "KAFKA_ADVERTISED_LISTENERS"
          value: "EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID}))"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: KAFKA_JMX_PORT
          value: "5555"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "{{conf['kafka-v2']['offsets-topic-replication-factor']}}"
        - name: "KAFKA_LINGER_MS"
          value: "{{conf['kafka-v2']['linger-ms']}}"
        - name: "KAFKA_NUM_PARTITIONS"
          value: "{{conf['kafka-v2']['num-partitions']}}"
        - name: "KAFKA_DEFAULT_REPLICATION_FACTOR"
          value: "{{conf['kafka-v2']['default-replication-factor']}}"
        - name: "KAFKA_MIN_INSYNC_REPLICAS"
          value: "{{conf['kafka-v2']['min-insync-replicas']}}"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        lifecycle:
          preStop:
            exec:
             command: ["sh", "-ce", "kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done"]          
        volumeMounts:
        - name: kafka-v2-data
          mountPath: /opt/kafka-data
      volumes:
      - name: jmx-config
        configMap:
          name: kafka-v2-jmx-configmap
  volumeClaimTemplates:
  - metadata:
      name: kafka-v2-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "hdd"
      resources:
        requests:
          storage: "{{conf['kafka-v2']['storage-size']}}"


